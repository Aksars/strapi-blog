
import 'dotenv/config';
import { Bot } from 'grammy';
import { ImageGeneratorFactory } from "./OpenAIImageGenerators";
import { InputFile } from 'grammy';

import fs from "fs";
import path from "path";

// --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ ---
const token = process.env.BOT_TOKEN;
if (!token) {
  console.error("‚ùå BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ .env");
  process.exit(1);
}

const apiToken = process.env.OPENAI_API_KEY;
if (!apiToken) {
  console.error("‚ùå OPENAI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω –≤ .env");
  process.exit(1);
}



// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ---
const bot = new Bot(token);

import OpenAI from "openai";
// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI ---
const client = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY, // –∫–ª—é—á –∏–∑ .env
});








bot.command("give", async (ctx) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ images
    const imagesDir = path.join("./images");
    const files = fs.readdirSync(imagesDir);

    if (!files.length) {
      await ctx.reply("‚ö†Ô∏è –í –ø–∞–ø–∫–µ images –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ä—Ç–∏–Ω–æ–∫.");
      return;
    }

    // –ù–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–¥–∞—ë–º —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É
    const randomFile = files[Math.floor(Math.random() * files.length)];
    const filePath = path.join(imagesDir, randomFile);

    const photoStream = fs.createReadStream(filePath);
    await ctx.replyWithPhoto(
      new InputFile(photoStream, randomFile),
      { caption: `–í–æ—Ç —Ç–≤–æ—è –∫–∞—Ä—Ç–∏–Ω–∫–∞: ${randomFile}` }
    );

  } catch (err) {
    console.error(err);
    await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏.");
  }
});











bot.command("image", async (ctx) => {
  console.log("–ö–æ–º–∞–Ω–¥–∞ /image –ø–æ–ª—É—á–µ–Ω–∞");

  try {
    const model = 'gpt';
    const prompt = ctx.match || "–°–æ–±–∞–∫–∞ –≤ –∫–æ—Å–º–æ—Å–µ";
    console.log("–ü—Ä–æ–º–ø—Ç:", prompt);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    await ctx.reply(`üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É –º–æ–¥–µ–ª—å—é ${model}`);
    console.log("–ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –º–æ–¥–µ–ª—å—é :", model);
    
    const generator = ImageGeneratorFactory.createGenerator(model, client);
    const result = await generator.generate(prompt);
    
    

    if (!result) {
      await ctx.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É");
      return;
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    console.time("–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –≤ Telegram");
    
    await ctx.replyWithPhoto(
      new InputFile(result.buffer, result.filename),
      { 
        caption: `üé® –í–∞—à–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∞: "${prompt}"\nüìÅ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫: ${result.filename}` 
      }
    );
    
    console.timeEnd("–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –≤ Telegram");
    
    await ctx.reply("‚úÖ –ö–∞—Ä—Ç–∏–Ω–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!");

  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏:", err);
    await ctx.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏");
  }
});











// --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ ---
bot.on('message:text', async (ctx) => {
  log("text", ctx)
});

// --- –°—Ç–∞—Ä—Ç –±–æ—Ç–∞ ---
bot.start();
console.log("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è!");





function log(section: string, ctx: any) {
  console.log(`${section} section`)
  console.log("prompt:", ctx)
}

