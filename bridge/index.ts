
import 'dotenv/config';
import { Bot, InlineKeyboard } from 'grammy';
import { ImageGeneratorFactory } from "./OpenAIImageGenerators";
import { InputFile } from 'grammy';
import fs from "fs";
import path from "path";

// --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ ---
const token = process.env.BOT_TOKEN;
if (!token) {
  console.error("‚ùå BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ .env");
  process.exit(1);
}

const apiToken = process.env.OPENAI_API_KEY;
if (!apiToken) {
  console.error("‚ùå OPENAI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω –≤ .env");
  process.exit(1);
}



// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ---
const bot = new Bot(token);

import OpenAI from "openai";
// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI ---
const client = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY, // –∫–ª—é—á –∏–∑ .env
});




// –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
interface UserState {
  state: string;
  timestamp: number;
}

const userStates = new Map<number, UserState>(); // userId -> UserState
const STATE_TIMEOUT = 10 * 60 * 1000; // 10 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è










// –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞
const mainMenu = new InlineKeyboard()
  .text("üñº –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É (GPT)", "generate_gpt")
  .text("üé® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É (Dalle)", "generate_dalle")
  .row()
  .text("üé≤ –°–ª—É—á–∞–π–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞", "random_image")
  .text("üìù –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç", "generate_text");

// –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç–∞ —Å –º–µ–Ω—é
bot.command("start", async (ctx) => {
  await ctx.reply("ü§ñ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", {
    reply_markup: mainMenu
  });
});

// –ö–æ–º–∞–Ω–¥–∞ –º–µ–Ω—é
bot.command("menu", async (ctx) => {
  await ctx.reply("üìã –ú–µ–Ω—é:", {
    reply_markup: mainMenu
  });
});




// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–æ–≤ –æ—Ç –∫–Ω–æ–ø–æ–∫
bot.on("callback_query:data", async (ctx) => {
  const action = ctx.callbackQuery.data;
  const userId = ctx.from.id;
  
  try {
    switch (action) {
      case "generate_gpt":
        await ctx.answerCallbackQuery();
        await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–ª—è GPT –º–æ–¥–µ–ª–∏:");
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å timestamp
        userStates.set(userId, { 
          state: 'waiting_gpt_prompt', 
          timestamp: Date.now() 
        });
        break;
        
      case "generate_dalle":
        await ctx.answerCallbackQuery();
        await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–ª—è Dalle –º–æ–¥–µ–ª–∏:");
        userStates.set(userId, { 
          state: 'waiting_dalle_prompt', 
          timestamp: Date.now() 
        });
        break;
        
      case "random_image":
        await ctx.answerCallbackQuery();
        await giveRandomImage(ctx);
        break;
        
      case "generate_text":
        await ctx.answerCallbackQuery();
        await ctx.reply("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞! üöß");
        break;
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏:", error);
    await ctx.answerCallbackQuery("‚ùå –û—à–∏–±–∫–∞");
    userStates.delete(userId);
  }
});










// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π)
bot.on('message:text', async (ctx) => {
  const userId = ctx.from.id;
  const userStateData = userStates.get(userId);
  const prompt = ctx.message.text;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –Ω–µ —É—Å—Ç–∞—Ä–µ–ª–æ –ª–∏ –æ–Ω–æ
  if (userStateData && prompt) {
    const now = Date.now();
    const stateAge = now - userStateData.timestamp;
    
    if (stateAge > STATE_TIMEOUT) {
      // –°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–ª–æ
      userStates.delete(userId);
      await ctx.reply("‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ /menu");
      return;
    }

    try {
      // –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      userStates.delete(userId);
      
      if (userStateData.state === 'waiting_gpt_prompt') {
        await generateAndSendImage(ctx, 'gpt', prompt);
      } else if (userStateData.state === 'waiting_dalle_prompt') {
        await generateAndSendImage(ctx, 'dalle', prompt);
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–º–ø—Ç–∞:", error);
      await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞");
    }
  } else {
    // –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    log("text", ctx);
  }
});


// –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–Ω–æ–ø–æ–∫
bot.on("callback_query:data", async (ctx) => {
  const action = ctx.callbackQuery.data;
  const userId = ctx.from.id;
  
  try {
    switch (action) {
      case "generate_gpt":
        await ctx.answerCallbackQuery();
        userStates.set(userId, { 
          state: 'waiting_gpt_prompt', 
          timestamp: Date.now() 
        });
        await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–ª—è GPT –º–æ–¥–µ–ª–∏:");
        break;
        
      case "generate_dalle":
        await ctx.answerCallbackQuery();
        userStates.set(userId, { 
          state: 'waiting_dalle_prompt', 
          timestamp: Date.now() 
        });
        await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–ª—è Dalle –º–æ–¥–µ–ª–∏:");
        break;
        
      // ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ cases
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏:", error);
    await ctx.answerCallbackQuery("‚ùå –û—à–∏–±–∫–∞");
  }
});

async function generateAndSendImage(ctx: any, model: 'gpt' | 'dalle', prompt: string) {
  try {
    await ctx.reply(`üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É –º–æ–¥–µ–ª—å—é ${model}...`);
    
    const generator = ImageGeneratorFactory.createGenerator(model, client);
    const result = await generator.generate(prompt);

    if (!result) {
      await ctx.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É");
      return;
    }

    await ctx.replyWithPhoto(
      new InputFile(result.buffer, result.filename),
      { 
        caption: `üé® ${model.toUpperCase()}: "${prompt}"\nüìÅ ${result.filename}` 
      }
    );
    
    await ctx.reply("‚úÖ –ì–æ—Ç–æ–≤–æ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –Ω–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π");

  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:", err);
    await ctx.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏");
  }
}


bot.command("image", async (ctx) => {
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ –≤–º–µ—Å—Ç–æ immediate –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
  const imageMenu = new InlineKeyboard()
    .text("GPT –º–æ–¥–µ–ª—å", "generate_gpt")
    .text("Dalle –º–æ–¥–µ–ª—å", "generate_dalle");

  await ctx.reply("üé® –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:", {
    reply_markup: imageMenu
  });
});




// --- –°—Ç–∞—Ä—Ç –±–æ—Ç–∞ ---
bot.start();
console.log("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è!");







// –í—ã–Ω–æ—Å–∏–º –ª–æ–≥–∏–∫—É –∫–æ–º–∞–Ω–¥—ã /give –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
async function giveRandomImage(ctx: any) {
  try {
    const imagesDir = path.join("./images");
    const files = fs.readdirSync(imagesDir);

    if (!files.length) {
      await ctx.reply("‚ö†Ô∏è –í –ø–∞–ø–∫–µ images –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ä—Ç–∏–Ω–æ–∫.");
      return;
    }

    const randomFile = files[Math.floor(Math.random() * files.length)];
    const filePath = path.join(imagesDir, randomFile);

    const photoStream = fs.createReadStream(filePath);
    await ctx.replyWithPhoto(
      new InputFile(photoStream, randomFile),
      { caption: `üé≤ –°–ª—É—á–∞–π–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞: ${randomFile}` }
    );

  } catch (err) {
    console.error(err);
    await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏.");
  }
}

// –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É /give
bot.command("give", giveRandomImage);

function log(section: string, ctx: any) {
  console.log(`${section} section`)
  console.log("prompt:", ctx)
}



// –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
setInterval(() => {
  const now = Date.now();
  let clearedCount = 0;

  for (const [userId, stateData] of userStates.entries()) {
    if (now - stateData.timestamp > STATE_TIMEOUT) {
      userStates.delete(userId);
      clearedCount++;
    }
  }

  if (clearedCount > 0) {
    console.log(`üßπ –û—á–∏—â–µ–Ω–æ ${clearedCount} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π. –û—Å—Ç–∞–ª–æ—Å—å: ${userStates.size}`);
  }
}, 5 * 60 * 1000); // –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

// –¢–∞–∫–∂–µ –æ—á–∏—â–∞–µ–º –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
console.log(`ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è...`);
userStates.clear();



// // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ–∫—É—â–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
// bot.command("states", async (ctx) => {
//   const adminId = 123456789; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID
//   if (ctx.from.id !== adminId) {
//     await ctx.reply("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤");
//     return;
//   }

//   const now = Date.now();
//   let message = `üìä –¢–µ–∫—É—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è (${userStates.size}):\n\n`;

//   for (const [userId, stateData] of userStates.entries()) {
//     const age = Math.round((now - stateData.timestamp) / 1000);
//     message += `üë§ ${userId}: ${stateData.state} (${age} —Å–µ–∫ –Ω–∞–∑–∞–¥)\n`;
//   }

//   await ctx.reply(message || "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π");
// });