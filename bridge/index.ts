
import 'dotenv/config';
import { Bot } from 'grammy';
import OpenAI from "openai";
import fs from "fs";
import path from "path";
import { InputFile } from 'grammy';
import fetch from "node-fetch";


// --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ ---
const token = process.env.BOT_TOKEN;
if (!token) {
  console.error("‚ùå BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ .env");
  process.exit(1);
}

const apiToken = process.env.OPENAI_API_KEY;
if (!apiToken) {
  console.error("‚ùå OPENAI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω –≤ .env");
  process.exit(1);
}

// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI ---
const client = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY, // –∫–ª—é—á –∏–∑ .env
});

// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ---
const bot = new Bot(token);









bot.command("give", async (ctx) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ images
    const imagesDir = path.join("./images");
    const files = fs.readdirSync(imagesDir);

    if (!files.length) {
      await ctx.reply("‚ö†Ô∏è –í –ø–∞–ø–∫–µ images –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ä—Ç–∏–Ω–æ–∫.");
      return;
    }

    // –ù–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–¥–∞—ë–º —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É
    const randomFile = files[Math.floor(Math.random() * files.length)];
    const filePath = path.join(imagesDir, randomFile);

    const photoStream = fs.createReadStream(filePath);
    await ctx.replyWithPhoto(
      new InputFile(photoStream, randomFile),
      { caption: `–í–æ—Ç —Ç–≤–æ—è –∫–∞—Ä—Ç–∏–Ω–∫–∞: ${randomFile}` }
    );

  } catch (err) {
    console.error(err);
    await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏.");
  }
});










bot.command("image", async (ctx) => {
  console.log("–ö–æ–º–∞–Ω–¥–∞ /image –ø–æ–ª—É—á–µ–Ω–∞");

  const startTotal = Date.now(); // –¥–ª—è –æ–±—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏

  try {
    const prompt = ctx.match || "–°–æ–±–∞–∫–∞ –≤ –∫–æ—Å–º–æ—Å–µ";
    console.log("–ü—Ä–æ–º–ø—Ç:", prompt);

    console.log("–ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏");
    console.time("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç–∏–Ω–∫–∏");

   // const image = await gptImage1(prompt)
    const b64 = await dalle2Image(prompt)




    console.log(`–û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${Date.now() - startTotal}ms`);

    await ctx.reply("‚úÖ –ö–∞—Ä—Ç–∏–Ω–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!");
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏:", err);
    await ctx.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏");
  }
});













// --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ ---
bot.on('message:text', async (ctx) => {
  log("text", ctx)
});

// --- –°—Ç–∞—Ä—Ç –±–æ—Ç–∞ ---
bot.start();
console.log("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è!");





function log(section: string, ctx: any) {
  console.log(`${section} section`)
  console.log("prompt:", ctx)
}



async function gptImage1(prompt: string) {
  const result = await client.images.generate({
    model: "gpt-image-1",
    quality: "low",
    prompt,
    size: "1024x1024",
  });

  console.timeEnd("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç–∏–Ω–∫–∏");
  console.log("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç ", result);

  const b64 = result.data ? result.data[0].b64_json : null;

  if (!b64) {
    console.log("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É");
    return;
  }
  console.log("–î–µ–∫–æ–¥–∏—Ä—É–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –≤ Buffer");
  console.time("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏");
  const buffer = Buffer.from(b64, "base64");

  const filename = `${Date.now()}_image.png`;
  const filepath = path.join("./images", filename);
  fs.writeFileSync(filepath, buffer);
  console.timeEnd("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏");

  console.log(`–ö–∞—Ä—Ç–∏–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: ${filepath}`);
  return filepath
}


async function dalle2Image(prompt: string) {
  const result = await client.images.generate({
    model: "dall-e-2",
    prompt: prompt,
    n: 1,
    size: "1024x1024",
  });

  console.timeEnd("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç–∏–Ω–∫–∏");
  console.log("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç ", result);

  const url = result.data?.[0]?.url;
  if (!url) {
    console.log("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É");
    return null;
  }

  console.log("–°–∫–∞—á–∏–≤–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –ø–æ URL");
  console.time("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏");

  // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –ø–æ URL
  const response = await fetch(url);
  const buffer = Buffer.from(await response.arrayBuffer());

  // –ò–º—è —Ñ–∞–π–ª–∞
  const filename = `${Date.now()}_image.png`;
  const filepath = path.join("./images", filename);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞ –¥–∏—Å–∫
  fs.writeFileSync(filepath, buffer);

  console.timeEnd("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏");
  console.log(`–ö–∞—Ä—Ç–∏–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: ${filepath}`);

  return filepath;
}

// // –¥–µ–∫–æ–¥–∏—Ä—É–µ–º Base64 –≤ Buffer
// const buffer = Buffer.from(b64, "base64");

// // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ Buffer
// await ctx.replyWithPhoto({ source: buffer }, { caption: `–í–æ—Ç —Ç–≤–æ—è –∫–∞—Ä—Ç–∏–Ω–∫–∞: ${prompt}` });


// const imageUrl =  result.data?result.data[0].url:null
// if (!imageUrl) {
//   await ctx.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É");
//   return;
// }

// await ctx.replyWithPhoto(imageUrl, { caption: `–í–æ—Ç —Ç–≤–æ—è –∫–∞—Ä—Ç–∏–Ω–∫–∞: ${prompt}` });
