
import {  InlineKeyboard, } from 'grammy';
import { ImageGeneratorFactory } from "./OpenAIImageGenerators.js";
import { InputFile } from 'grammy';
import fs from "fs";
import path from "path";
import OpenAI from "openai";
import { getTokens } from './initialization/tokens.js';
import { initRedisStorage } from './initialization/redis.js';
import { createBot } from './initialization/bot.js';

const { token, apiToken } = getTokens();
const storage = await initRedisStorage()

const bot = createBot(storage, token);

bot.start();
console.log("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è!");


// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI ---
const client = new OpenAI({
  apiKey: apiToken,
});



// –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞
const mainMenu = new InlineKeyboard()
  .text("üñº –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É (GPT)", "generate_gpt")
  .text("üé® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É (Dalle)", "generate_dalle")
  .row()
  .text("üé≤ –°–ª—É—á–∞–π–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞", "random_image")
  .text("üìù –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç", "generate_text");

// –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç–∞ —Å –º–µ–Ω—é
bot.command("start", async (ctx) => {
  await ctx.reply("ü§ñ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", {
    reply_markup: mainMenu
  });
});

// –ö–æ–º–∞–Ω–¥–∞ –º–µ–Ω—é
bot.command("menu", async (ctx) => {
  log("menu", ctx);
  await ctx.reply("üìã –ú–µ–Ω—é:", {
    reply_markup: mainMenu
  });
});



// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–æ–≤ –æ—Ç –∫–Ω–æ–ø–æ–∫
bot.on("callback_query:data", async (ctx) => {
  const action = ctx.callbackQuery.data;
  
  try {
    switch (action) {
      case "generate_gpt":
        await ctx.answerCallbackQuery();
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Å—Å–∏—é –≤–º–µ—Å—Ç–æ userStates
        ctx.session.state = 'waiting_gpt_prompt';
        ctx.session.timestamp = Date.now();
        await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–ª—è GPT –º–æ–¥–µ–ª–∏:");
        break;
        
      case "generate_dalle":
        await ctx.answerCallbackQuery();
        ctx.session.state = 'waiting_dalle_prompt';
        ctx.session.timestamp = Date.now();
        await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–ª—è Dalle –º–æ–¥–µ–ª–∏:");
        break;
        
      case "random_image":
        await ctx.answerCallbackQuery();
        await giveRandomImage(ctx);
        break;
        
      case "generate_text":
        await ctx.answerCallbackQuery();
        await ctx.reply("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞! üöß");
        break;
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏:", error);
    await ctx.answerCallbackQuery("‚ùå –û—à–∏–±–∫–∞");
    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    ctx.session.state = undefined;
    ctx.session.timestamp = undefined;
  }
});





async function generateAndSendImage(ctx: any, model: 'gpt' | 'dalle', prompt: string) {
  try {
    await ctx.reply(`üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É –º–æ–¥–µ–ª—å—é ${model}...`);
    
    const generator = ImageGeneratorFactory.createGenerator(model, client);
    const result = await generator.generate(prompt);

    if (!result) {
      await ctx.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É");
      return;
    }

    await ctx.replyWithPhoto(
      new InputFile(result.buffer, result.filename),
      { 
        caption: `üé® ${model.toUpperCase()}: "${prompt}"\nüìÅ ${result.filename}` 
      }
    );
    
    await ctx.reply("‚úÖ –ì–æ—Ç–æ–≤–æ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –Ω–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π");

  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:", err);
    await ctx.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏");
  }
}


// bot.command("image", async (ctx) => {
//   // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ –≤–º–µ—Å—Ç–æ immediate –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
//   const imageMenu = new InlineKeyboard()
//     .text("GPT –º–æ–¥–µ–ª—å", "generate_gpt")
//     .text("Dalle –º–æ–¥–µ–ª—å", "generate_dalle");

//   await ctx.reply("üé® –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:", {
//     reply_markup: imageMenu
//   });
// });


// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ–∫—É—â–∏—Ö —Å–µ—Å—Å–∏–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
bot.command("sessions", async (ctx) => {
  log("sessions", ctx);
  const adminId = 936067427; 
  if (ctx.from?.id !== adminId) {
    await ctx.reply("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤");
    return;
  }

  // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ö—Ä–∞–Ω–∏–ª–∏—â—É —Å–µ—Å—Å–∏–π
  // Note: –≠—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –Ω–µ–∫–æ—Ç–æ—Ä—ã–º–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞–º–∏
  const storage = (ctx.session as any).storage;
  
  if (!storage || typeof storage.read !== 'function') {
    await ctx.reply("‚ùå –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–µ—Å—Å–∏–π –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —á—Ç–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö");
    return;
  }

  try {
    const now = Date.now();
    let message = "üìä –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏:\n\n";
    let sessionCount = 0;

    // –ß–∏—Ç–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ —Å–µ—Å—Å–∏–π (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞)
    const keys = await storage.keys();
    
    for (const key of keys) {
      try {
        const sessionData = await storage.read(key);
        if (sessionData && sessionData.state) {
          const age = Math.round((now - (sessionData.timestamp || 0)) / 1000);
          const userId = key; // –ö–ª—é—á –æ–±—ã—á–Ω–æ —Ä–∞–≤–µ–Ω userId
          
          message += `üë§ ${userId}: ${sessionData.state} (${age} —Å–µ–∫ –Ω–∞–∑–∞–¥)\n`;
          sessionCount++;
        }
      } catch (error) {
        message += `üë§ ${key}: –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è\n`;
      }
    }

    await ctx.reply(message || "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π");
    await ctx.reply(`–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: ${sessionCount}`);

  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å–µ—Å—Å–∏–π:", error);
    await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–π");
  }
});


bot.command("give", giveRandomImage);



// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π)
bot.on('message:text', async (ctx) => {
  const prompt = ctx.message.text;
  const STATE_TIMEOUT = 10 * 60 * 1000; // 10 –º–∏–Ω—É—Ç

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ —Å–µ—Å—Å–∏–∏ –∏ –Ω–µ —É—Å—Ç–∞—Ä–µ–ª–æ –ª–∏ –æ–Ω–æ
  if (ctx.session.state && ctx.session.timestamp && prompt) {
    const now = Date.now();
    const stateAge = now - ctx.session.timestamp;
    
    if (stateAge > STATE_TIMEOUT) {
      // –°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–ª–æ
      await ctx.reply("‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ /menu");
      // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
      ctx.session.state = undefined;
      ctx.session.timestamp = undefined;
      return;
    }

    try {
      const currentState = ctx.session.state;
      
      // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
      ctx.session.state = undefined;
      ctx.session.timestamp = undefined;
      
      if (currentState === 'waiting_gpt_prompt') {
        await generateAndSendImage(ctx, 'gpt', prompt);
      } else if (currentState === 'waiting_dalle_prompt') {
        await generateAndSendImage(ctx, 'dalle', prompt);
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–º–ø—Ç–∞:", error);
      await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞");
    }
  } else {
    // –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
   
    log("text", ctx);
  }
});








// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Å—Å–∏–∏
bot.use(async (ctx, next) => {
  const STATE_TIMEOUT = 10 * 60 * 1000;
  
  if (ctx.session.timestamp) {
    const now = Date.now();
    if (now - ctx.session.timestamp > STATE_TIMEOUT) {
      // –û—á–∏—â–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à—É—é —Å–µ—Å—Å–∏—é
      ctx.session.state = undefined;
      ctx.session.timestamp = undefined;
    }
  }
  
  await next();
});


// Middleware –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
bot.use(async (ctx, next) => {
  if (ctx.session && !ctx.session.createdAt) {
    ctx.session.createdAt = Date.now(); // –ø–µ—Ä–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
  }
  ctx.session.lastActivity = Date.now(); // –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
  await next();
});









// –í—ã–Ω–æ—Å–∏–º –ª–æ–≥–∏–∫—É –∫–æ–º–∞–Ω–¥—ã /give –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
async function giveRandomImage(ctx: any) {
  try {
    const imagesDir = path.join("./images");
    const files = fs.readdirSync(imagesDir);

    if (!files.length) {
      await ctx.reply("‚ö†Ô∏è –í –ø–∞–ø–∫–µ images –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ä—Ç–∏–Ω–æ–∫.");
      return;
    }

    const randomFile = files[Math.floor(Math.random() * files.length)];
    const filePath = path.join(imagesDir, randomFile);

    const photoStream = fs.createReadStream(filePath);
    await ctx.replyWithPhoto(
      new InputFile(photoStream, randomFile),
      { caption: `üé≤ –°–ª—É—á–∞–π–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞: ${randomFile}` }
    );

  } catch (err) {
    console.error(err);
    await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏.");
  }
}

function log(section: string, ctx: any) {
  console.log(`${section} section`)
  console.log("prompt:", ctx)
}



