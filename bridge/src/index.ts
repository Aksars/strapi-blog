
import { mainMenu, saveMenu, whereGetResultMenu } from './keyboards/index.js';
import { getTokens, initRedisStorage, createBot, initOpenAI } from './init/index.js';
import { logger } from './utils/logger.js'
import { DateUtils } from "./utils/dateUtils.js";
import ImageGenerationService from "./service/imageGenerationService.js";
import ImageDeliveryService from './service/imageDeliveryService.js';
import StrapiService from "./service/strapiService.js";
import FileImageService from './service/fileImageService.js'
import { Context } from 'grammy';
import { MyContext } from './types/session.js';

// –ø–æ–ª—É—á–∞–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω—ã –∫ –±–æ—Ç—É –∏ chatgpt
const { token, apiToken } = getTokens()

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–¥–∏—Å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ, openAIClient, –∏ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞
const openAIClient = initOpenAI(apiToken)
const storage = await initRedisStorage()
const bot = createBot(storage, token)
bot.start();
logger.info(" ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è!")

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∞—Å—Å—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å—Ç—Ä–∞–ø–∏, –æ—Ç–ø—Ä–∞–≤–∫–∏, –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
const strapiService = new StrapiService()
ImageGenerationService.initialize(openAIClient);
ImageDeliveryService.initialize(strapiService);


// –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç–∞ —Å –º–µ–Ω—é
bot.command("start", async (ctx) => {
  await ctx.reply("ü§ñ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", {
    reply_markup: mainMenu
  });
});
async function showMainMenu(ctx: Context) {
  await ctx.reply("üìã –ú–µ–Ω—é:", {
    reply_markup: mainMenu
  });
}

async function showSaveMenu(ctx: Context) {
  await ctx.editMessageText("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä?", {
    reply_markup: saveMenu
  });
}

// –ö–æ–º–∞–Ω–¥–∞ –º–µ–Ω—é
bot.command("menu", async (ctx) => {
  logger.info("menu", ctx);
  await showMainMenu(ctx);
});

bot.callbackQuery("whereGetResultMenu", async (ctx) => {
  await ctx.answerCallbackQuery(); // –∑–∞–∫—Ä—ã—Ç—å "—á–∞—Å–∏–∫–∏"  
  await ctx.editMessageText("üìã –ú–µ–Ω—é:", {
    reply_markup: whereGetResultMenu
  });
});

bot.callbackQuery("menu", async (ctx) => {
  await ctx.answerCallbackQuery(); // –∑–∞–∫—Ä—ã—Ç—å "—á–∞—Å–∏–∫–∏"
  await ctx.editMessageText("üìã –ú–µ–Ω—é:", {
    reply_markup: mainMenu
  });
});

async function showAIMenu(ctx: MyContext) {
  await ctx.editMessageText(`–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è ${ctx.session.model!.toLocaleUpperCase()}:`, {
    reply_markup: whereGetResultMenu
  });
}

  //await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è GPT:", { reply_markup: gptMenu });
        // await ctx.reply("–ù–∞–ø–∏—à–∏ —Å–≤–æ–π e-mail:", {
        //   reply_markup: { force_reply: true, }
        // });

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–æ–≤ –æ—Ç –∫–Ω–æ–ø–æ–∫
bot.on("callback_query:data", async (ctx) => {
  const action = ctx.callbackQuery.data;

  try {
    switch (action) {
      case "generate_gpt":
        await ctx.answerCallbackQuery();
        // –ù–∞—á–∏–Ω–∞–µ–º –º–Ω–æ–≥–æ—à–∞–≥–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å
        ctx.session.state = 'choosing_action';
        ctx.session.model = 'gpt';
        ctx.session.timestamp = Date.now();

        await showAIMenu(ctx)
        break;

      case "generate_dalle":
        await ctx.answerCallbackQuery();
        ctx.session.state = 'choosing_action';
        ctx.session.model = 'dalle';
        ctx.session.timestamp = Date.now();

        await showAIMenu(ctx)
        break;

      case "action_just_generate":
        await ctx.answerCallbackQuery();
        ctx.session.action = 'generate';
        ctx.session.state = 'choosing_save_option';
        ctx.session.timestamp = Date.now();

        await showSaveMenu(ctx)
        break;

      case "action_generate_and_upload":
        await ctx.answerCallbackQuery();
        ctx.session.action = 'generate_and_upload';
        ctx.session.state = 'choosing_save_option';
        ctx.session.timestamp = Date.now();

        await showSaveMenu(ctx)
        break;

      case "save_yes":
        await ctx.answerCallbackQuery();
        ctx.session.saveToServer = true;
        ctx.session.state = 'waiting_prompt';
        ctx.session.timestamp = Date.now();

        await ctx.editMessageText("üíæ –ë—É–¥—É —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏:");
        break;

      case "save_no":
        await ctx.answerCallbackQuery();
        ctx.session.saveToServer = false;
        ctx.session.state = 'waiting_prompt';
        ctx.session.timestamp = Date.now();

        await ctx.editMessageText("üö´ –ù–µ –±—É–¥—É —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏:");
        break;

      case "random_image":
        await ctx.answerCallbackQuery();
        const img = await FileImageService.getRandomImage();
        if (img)
          await ImageDeliveryService.sendToTelegram(ctx, img)
        else
          await ctx.reply("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∏ –æ–¥–Ω—É –∫–∞—Ä—Ç–∏–Ω–∫—É(( üöß");
        break;

      case "generate_text":
        await ctx.answerCallbackQuery();
        await ctx.reply("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞! üöß");
        break;

    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏:", error);
    await ctx.answerCallbackQuery("‚ùå –û—à–∏–±–∫–∞");
    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    ctx.session.state = undefined;
    ctx.session.timestamp = undefined;
    ctx.session.model = undefined;
    ctx.session.action = undefined;
    ctx.session.saveToServer = undefined;
  }
});





bot.command("test", async (ctx) => {
  // await ctx.reply("–í—ã–±–µ—Ä–∏:", {
  //   reply_markup: {
  //     keyboard: [
  //       [{ text: "–ö–Ω–æ–ø–∫–∞ 1" }, { text: "–ö–Ω–æ–ø–∫–∞ 2" }],
  //       [{ text: "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact: true }],
  //       [{ text: "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≥–µ–æ–ø–æ–∑–∏—Ü–∏–µ–π", request_location: true }]
  //     ],
  //     resize_keyboard: true,
  //     one_time_keyboard: true
  //   }
  // });

  // await ctx.reply("–ù–∞–ø–∏—à–∏ —Å–≤–æ–π e-mail:", {
  //   reply_markup: { force_reply: true }
  // });
})

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ–∫—É—â–∏—Ö —Å–µ—Å—Å–∏–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
bot.command("sessions", async (ctx) => {
  logger.info("sessions", ctx);
  const adminId = 936067427;
  if (ctx.from?.id !== adminId) {
    await ctx.reply("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤");
    return;
  }

  // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ö—Ä–∞–Ω–∏–ª–∏—â—É —Å–µ—Å—Å–∏–π
  // Note: –≠—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –Ω–µ–∫–æ—Ç–æ—Ä—ã–º–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞–º–∏
  const storage = (ctx.session as any).storage;

  if (!storage || typeof storage.read !== 'function') {
    await ctx.reply("‚ùå –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–µ—Å—Å–∏–π –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —á—Ç–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö");
    return;
  }

  try {
    const now = Date.now();
    let message = "üìä –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏:\n\n";
    let sessionCount = 0;

    // –ß–∏—Ç–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ —Å–µ—Å—Å–∏–π (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞)
    const keys = await storage.keys();

    for (const key of keys) {
      try {
        const sessionData = await storage.read(key);
        if (sessionData && sessionData.state) {
          const age = Math.round((now - (sessionData.timestamp || 0)) / 1000);
          const userId = key; // –ö–ª—é—á –æ–±—ã—á–Ω–æ —Ä–∞–≤–µ–Ω userId

          message += `üë§ ${userId}: ${sessionData.state} (${age} —Å–µ–∫ –Ω–∞–∑–∞–¥)\n`;
          sessionCount++;
        }
      } catch (error) {
        message += `üë§ ${key}: –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è\n`;
      }
    }

    await ctx.reply(message || "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π");
    await ctx.reply(`–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: ${sessionCount}`);

  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å–µ—Å—Å–∏–π:", error);
    await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–π");
  }
});


bot.command("give", async (ctx) => {
  const img = FileImageService.getRandomImage();
  if (img)
    await ImageDeliveryService.sendToTelegram(ctx, img)
  else
    await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–π");
})

bot.command("stats", async (ctx) => {
  const stats = await FileImageService.getImageStats();

  let telegramDate;
  if (ctx.message && ctx.message.date) {
    telegramDate = new Date(ctx.message.date * 1000);
  }
  const mskTimeNow = DateUtils.mskTime();

  // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ lastCreated
  const lastCreatedText = stats.lastCreated
    ? DateUtils.smartTimeDiff(stats.lastCreated, telegramDate)
    : '–Ω–∏–∫–æ–≥–¥–∞';

  const message =
    `üì¶ *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞*\n` +
    `‚îú üñºÔ∏è      ${stats.totalImages} —Ñ–∞–π–ª–æ–≤\n` +
    `‚îú üíæ      ${stats.totalSizeMB}\n` +
    `‚îú üìà      ${stats.avgSizeMB} –≤ —Å—Ä–µ–¥–Ω–µ–º\n` +
    `‚îú ‚è∞üîÑ  ${lastCreatedText} –ø–æ MSK –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–ø–¥–µ–π—Ç \n` +
    `‚îú ‚è∞üñ•Ô∏è  ${mskTimeNow} –ø–æ MSK –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ\n` +
    `‚îú ‚è∞üì®  ${telegramDate ? DateUtils.mskTime(telegramDate) : 'N/A'} –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –¢–ì\n` +
    `‚îî ‚è±Ô∏èüíö  ${DateUtils.formatUptime(process.uptime())} Server Uptime`;

  await ctx.reply(message);
});

// `‚îú üì∂ ${calculatePing()}ms –ü–∏–Ω–≥\n` +


// // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
// message += `üïê –°–æ–∑–¥–∞–Ω: ${DateFormatter.relative(file.createdAt)}\n`;











// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π)
bot.on('message:text', async (ctx) => {
  const prompt = ctx.message.text;
  const STATE_TIMEOUT = 10 * 60 * 1000; // 10 –º–∏–Ω—É—Ç

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ —Å–µ—Å—Å–∏–∏ –∏ –Ω–µ —É—Å—Ç–∞—Ä–µ–ª–æ –ª–∏ –æ–Ω–æ
  if (ctx.session.state && ctx.session.timestamp && prompt) {
    const now = Date.now();
    const stateAge = now - ctx.session.timestamp;

    if (stateAge > STATE_TIMEOUT) {
      await ctx.reply("‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ /menu");
      // –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
      ctx.session = {};
      return;
    }

    try {
      const currentState = ctx.session.state;
      const model = ctx.session.model;
      const action = ctx.session.action;
      const saveToServer = ctx.session.saveToServer;

      // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
      ctx.session = {};

      if (currentState === 'waiting_prompt' && model && action) {
        await handleImageGeneration(ctx, prompt, model, action, saveToServer);
      } else if (currentState === 'generate_to_strapi') {
        await handleStrapiGeneration(ctx, prompt);
      }

    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–º–ø—Ç–∞:", error);
      await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞");
      ctx.session = {};
    }
  } else {
    // –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    logger.info("text", ctx);
  }
});

// –í—ã–Ω–æ—Å–∏–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã
async function handleImageGeneration(ctx: any, prompt: string, model: 'gpt' | 'dalle', action: string, saveToServer: boolean = true) {
  await ctx.reply(`üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É –º–æ–¥–µ–ª—å—é ${model}...`);

  const result = await ImageGenerationService.generateImage(model, prompt);

  if (!result.success || !result.image) {
    await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É");
    return;
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  if (saveToServer) {
    const saved = FileImageService.saveImage(result.image);
    if (saved) {
      await ctx.reply("üíæ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä");
    }
  }

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
  const sent = await ImageDeliveryService.sendToTelegram(
    ctx,
    result.image,
    `üé® ${model.toUpperCase()}: "${prompt}"\nüìÅ ${result.image.filename}`
  );

  if (!sent) {
    await ctx.reply("‚ö†Ô∏è –ö–∞—Ä—Ç–∏–Ω–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å");
  }

  // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Strapi
  if (action === 'generate_and_upload') {
    await ctx.reply("üîÑ –û—Ç–ø—Ä–∞–≤–ª—è—é –≤ Strapi...");
    const strapiResult = await ImageDeliveryService.sendToStrapi(result.image);

    if (strapiResult) {
      await ctx.reply("‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ Strapi!");
    } else {
      await ctx.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤ Strapi");
    }
  }

  await ctx.reply("‚úÖ –ì–æ—Ç–æ–≤–æ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –Ω–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π");
}

async function handleStrapiGeneration(ctx: any, prompt: string) {
  // –°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  await ctx.reply(`üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É –∏ –∑–∞–≥—Ä—É–∂–∞—é –≤ Strapi...`);

  const result = await ImageGenerationService.generateImage('dalle', prompt);

  if (!result.success || !result.image) {
    await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É");
    return;
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  FileImageService.saveImage(result.image);

  const deliveryResult = await ImageDeliveryService.sendToBoth(ctx, result.image);

  if (deliveryResult.strapiSuccess) {
    await ctx.reply("‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ Strapi!");
  } else {
    await ctx.reply("‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å Strapi");
  }
}







// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Å—Å–∏–∏
bot.use(async (ctx, next) => {
  const STATE_TIMEOUT = 10 * 60 * 1000;

  if (ctx.session.timestamp) {
    const now = Date.now();
    if (now - ctx.session.timestamp > STATE_TIMEOUT) {
      // –û—á–∏—â–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à—É—é —Å–µ—Å—Å–∏—é
      ctx.session.state = undefined;
      ctx.session.timestamp = undefined;
    }
  }

  await next();
});


// Middleware –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
bot.use(async (ctx, next) => {
  if (ctx.session && !ctx.session.createdAt) {
    ctx.session.createdAt = Date.now(); // –ø–µ—Ä–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
  }
  ctx.session.lastActivity = Date.now(); // –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
  await next();
});




// bot.command("image", async (ctx) => {
//   // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ –≤–º–µ—Å—Ç–æ immediate –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
//   const imageMenu = new InlineKeyboard()
//     .text("GPT –º–æ–¥–µ–ª—å", "generate_gpt")
//     .text("Dalle –º–æ–¥–µ–ª—å", "generate_dalle");

//   await ctx.reply("üé® –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:", {
//     reply_markup: imageMenu
//   });
// });

