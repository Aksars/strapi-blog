import { Redis } from "ioredis";
import { RedisAdapter } from "@grammyjs/storage-redis";
import { SessionData } from "../types/session.js"; // ‚Üê –∏–º–ø–æ—Ä—Ç —Ç–∏–ø–∞

export async function initRedisStorage() {

    const redis = new Redis({
        host: "redis", // üëà –∏–º—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∏–∑ docker-compose
        port: 6379,
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    redis.on('error', (err) => {
        console.error('‚ùå Redis error:', err);
    });

    redis.on('connect', () => {
        console.log('‚úÖ Connected to Redis');
    });

    try {
        // –¢–∞–π–º–∞—É—Ç 2 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        const start = Date.now()
        const pong = await Promise.race([
            redis.ping(),
            new Promise((_, reject) =>
                setTimeout(() => reject(new Error('Redis timeout')), 2000)
            )
        ]);
        console.log(`‚úÖ Redis available: ${pong} in ${Date.now() - start}ms`);
    } catch (error) {
        console.error('‚ùå Redis error:', error);
    }

    const storage = new RedisAdapter<SessionData>({
        instance: redis, // ‚Üê –ü–µ—Ä–µ–¥–∞–µ–º –∏–Ω—Å—Ç–∞–Ω—Å
        ttl: 60 * 60 * 24, // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (24 —á–∞—Å–∞)
    });

    return storage
}
