import { InputFile } from 'grammy';
import path from 'path';
import fs from 'fs';
import { ImageGeneratorFactory } from './openAIGenerators.js';
import OpenAI from 'openai';
import { Context } from 'grammy';
import { formatFileSize } from '../utils/sizeFormater.js'



export class ImageService {
    constructor(private openAIClient: OpenAI) { }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ AI
    async generateAIImage(ctx: Context, model: 'gpt' | 'dalle', prompt: string) {
        try {
            await ctx.reply(`üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É –º–æ–¥–µ–ª—å—é ${model}...`);

            const generator = ImageGeneratorFactory.createGenerator(model, this.openAIClient);
            const result = await generator.generate(prompt);

            if (!result) {
                await ctx.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É");
                return null;
            }

            await this.sendImage(ctx, result.buffer, result.filename,
                `üé® ${model.toUpperCase()}: "${prompt}"`);

            await ctx.reply("‚úÖ –ì–æ—Ç–æ–≤–æ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –Ω–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π");
            return result;

        } catch (err) {
            console.error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:", err);
            await ctx.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏");
            throw err;
        }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –ø–∞–ø–∫–∏
    async sendRandomImageFromFolder(ctx: Context, folderPath: string = "./images") {
        try {
            const files = fs.readdirSync(folderPath);

            if (!files.length) {
                await ctx.reply("‚ö†Ô∏è –í –ø–∞–ø–∫–µ images –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ä—Ç–∏–Ω–æ–∫.");
                return null;
            }

            const imageFiles = files.filter(file =>
                /\.(jpg|jpeg|png|gif|webp)$/i.test(file)
            );

            if (!imageFiles.length) {
                await ctx.reply("‚ö†Ô∏è –í –ø–∞–ø–∫–µ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.");
                return null;
            }

            const randomFile = imageFiles[Math.floor(Math.random() * imageFiles.length)];
            const filePath = path.join(folderPath, randomFile);

            const imageBuffer = fs.readFileSync(filePath);
            await this.sendImage(ctx, imageBuffer, randomFile, `üé≤ –°–ª—É—á–∞–π–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞: ${randomFile}`);

            return randomFile;

        } catch (err) {
            console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", err);
            await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏.");
            throw err;
        }
    }

    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    private async sendImage(
        ctx: Context,
        imageBuffer: Buffer,
        filename: string,
        caption: string
    ) {
        await ctx.replyWithPhoto(
            new InputFile(imageBuffer, filename),
            { caption }
        );
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
    async getImageStats() {
        const imagesDir = "./images";
        if (!fs.existsSync(imagesDir)) {
            return { total: 0, files: [] };
        }

        const files = fs.readdirSync(imagesDir);
        const imageFiles = files.filter(file =>
            /\.(jpg|jpeg|png|gif|webp)$/i.test(file)
        );

        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö
        const imagesWithStats = imageFiles.map(file => {
            const filePath = path.join(imagesDir, file);
            const stats = fs.statSync(filePath);
            return {
                name: file,
                path: filePath,
                size: stats.size,
                sizeMB: formatFileSize(stats.size),
                createdAt: stats.birthtime
            };
        });

        const totalSize = imagesWithStats.reduce((sum, file) => sum + file.size, 0);
        const totalSizeMB = formatFileSize(totalSize)
        const avgSizeMB = formatFileSize(totalSize / imagesWithStats.length)
        const lastCreated = imagesWithStats.toSorted((a, b) => b.createdAt.getTime() - a.createdAt.getTime())[0].createdAt
        return {
            totalImages: imagesWithStats.length,
            totalSize,
            totalSizeMB,
            avgSizeMB,
            lastCreated,
            files: imagesWithStats
        };

    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    validateImagePrompt(prompt: string): { isValid: boolean; message?: string } {
        if (!prompt || prompt.trim().length < 3) {
            return { isValid: false, message: "–ü—Ä–æ–º–ø—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π" };
        }

        if (prompt.length > 1000) {
            return { isValid: false, message: "–ü—Ä–æ–º–ø—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π" };
        }

        return { isValid: true };
    }
}


