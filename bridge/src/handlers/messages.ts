import { Bot } from 'grammy';
import { MyContext } from '../types/session.js';
import { switchMainMenu, showTextActions, showImageActions } from '../keyboards/index.js';
import { ImageGenerationService } from '../service/imageGenerationService.js';
import { TextGenerationService } from '../service/textGenerationService.js';
import { ImageModel, TextModel } from '../types/models.js';
import { InputFile } from 'grammy';
import ImageDeliveryService from '../service/imageDeliveryService.js';
import StrapiService from '../service/strapiService.js';

export function setupMessageHandlers(
  bot: Bot<MyContext>,
   imageDeliveryService: ImageDeliveryService,
   imageGenerationService: ImageGenerationService,
   textGenerationService: TextGenerationService,
   strapiService: StrapiService
) {
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  bot.on('message:text', async (ctx) => {
    const session = ctx.session;
    const messageText = ctx.message.text;

    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
    if (messageText.startsWith('/')) {
      return;
    }

    try {
      switch (session.state) {
        case 'waiting_text_prompt':
          await handleTextPrompt(ctx, messageText);
          break;

        case 'waiting_image_prompt':
          await handleImagePrompt(ctx, messageText);
          break;

        case 'waiting_temperature_prompt':
          await handleMadnessPrompt(ctx, messageText);
          break;          

        default:
          // –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
          await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ /menu");
          break;
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
      await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞");
      await switchMainMenu(ctx);
    }
  });




   // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        // await ct–ú–æ–¥–µ–ª—å: ${model}*\n` +
        //   `üìä *–¢–æ–∫–µ–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: ${result.usage?.total_tokens || 'N/A'}*`
        // );

        // // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è
        // await ctx.reply(
        //   "–ß—Ç–æ –¥–∞–ª—å—à–µ?\n\n" +
        //   "‚Ä¢ /regenerate - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ\n" +
        //   "‚Ä¢ /new_text - –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å\n" +
        //   "‚Ä¢ /menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        //   { parse_mode: 'Markdown' }
        // );x.api.editMessageText(
        //   ctx.chat?.id!,         
        //   `üìù **–†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:**\n\n${result.text}\n\n` +
        //   `üîß *

//  async function generateText(params: {
//   ctx: MyContext;
//   textService: TextGenerationService;
//   prompt: string;
//   model: TextModel;
//   temperature?: number ;
// }) {
//   const { ctx, textService, prompt, model } = params;
//   let {temperature = 0.8 } = params
//     try {
//       //—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –æ—Ç 0 –¥–æ 2; t < 2 ==> 2
//       temperature = temperature < 0 ? 0 : temperature
//       temperature = temperature > 2 ? 2 : temperature;
//       // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
//       await ctx.reply("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç...");

//       // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞
//       const result = await textService.generateText(prompt, {
//         model: model,
//         temperature: temperature
//       });

//       if (result.success && result.text) {
//         // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–µ—Å—Å–∏–∏
//         ctx.session.tempData = {
//           prompt,
//           generatedText: result.text
//         };      

//       } else {
//         await ctx.editMessageText(`‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ${result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
//         await switchMainMenu(ctx);
//       }

//     } catch (error) {
//       console.error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞:", error);
//       await ctx.editMessageText("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞");
//       await switchMainMenu(ctx);
//     }
//   }


async function handleMadnessPrompt(ctx: MyContext, prompt: string) {
  
}

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
  async function handleTextPrompt(ctx: MyContext, prompt: string) {
    const session = ctx.session;

    if (!session.textModel) {
      await ctx.reply("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu");
      return;
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–∞
    const validation = textGenerationService.validatePrompt(prompt);
    if (!validation.isValid) {
      await ctx.reply(`‚ùå ${validation.message}`);
      return;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–ø—Ç –≤ —Å–µ—Å—Å–∏–∏
    session.tempData = { prompt };

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    const loadingMsg = await ctx.reply("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç...");
 //—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –æ—Ç 0 –¥–æ 2; t < 2 ==> 2
    
      // temperature = temperature < 0 ? 0 : temperature
      // temperature = temperature > 2 ? 2 : temperature;
    try {
      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞
      const result = await textGenerationService.generateText(prompt, {
        model: session.textModel ,
        temperature: 0.7,
        max_tokens: 1000
      });

      if (result.success && result.text) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await ctx.api.editMessageText(
          ctx.chat?.id!,
          loadingMsg.message_id,
          `üìù **–†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:**\n\n${result.text}\n\n` +
          `üîß *–ú–æ–¥–µ–ª—å: ${session.textModel}*\n` +
          `üìä *–¢–æ–∫–µ–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: ${result.usage?.total_tokens || 'N/A'}*`,
          { parse_mode: 'Markdown' }
        );

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —Å–µ—Å—Å–∏–∏
        session.tempData.generatedText = result.text;

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        await showTextActions(ctx);

      } else {
        await ctx.api.editMessageText(
          ctx.chat?.id!,
          loadingMsg.message_id,
          `‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ${result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`
        );
        await switchMainMenu(ctx);
      }

    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞:", error);
      await ctx.api.editMessageText(
        ctx.chat?.id!,
        loadingMsg.message_id,
        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞"
      );
      await switchMainMenu(ctx);
    } finally {
      session.state = undefined;
    }
  }
















  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  async function handleImagePrompt(ctx: MyContext, prompt: string) {
    const session = ctx.session;

    if (!session.imageModel) {
      await ctx.reply("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu");
      return;
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–∞
    const validation = imageGenerationService.validatePrompt(prompt);
    if (!validation.isValid) {
      await ctx.reply(`‚ùå ${validation.message}`);
      return;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–ø—Ç –≤ —Å–µ—Å—Å–∏–∏
    session.tempData = { prompt };

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    const loadingMsg = await ctx.reply("üé® –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...");

    try {
      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const result = await imageGenerationService.generateImage(
        session.imageModel ,
        prompt
      );

      if (result.success && result.image) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å–µ—Å—Å–∏–∏
        session.tempData.image = result.image;

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        await ctx.api.sendPhoto(
          ctx.chat?.id!,
          new InputFile(result.image.buffer, result.image.filename),
          {
            caption: `üñºÔ∏è **–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ:** ${prompt}\nüîß *–ú–æ–¥–µ–ª—å: ${session.imageModel}*`,
            parse_mode: 'Markdown'
          }
        );

        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        await ctx.api.deleteMessage(ctx.chat?.id!, loadingMsg.message_id);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        await showImageActions(ctx);

      } else {
        await ctx.api.editMessageText(
          ctx.chat?.id!,
          loadingMsg.message_id,
          `‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ${result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`
        );
        await switchMainMenu(ctx);
      }

    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", error);
      await ctx.api.editMessageText(
        ctx.chat?.id!,
        loadingMsg.message_id,
        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
      );
      await switchMainMenu(ctx);
    } finally {
      session.state = undefined;
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞
  bot.command('regenerate', async (ctx) => {
    const session = ctx.session;
    const prompt = session.tempData?.prompt;
    const textModel = session.textModel;

    if (!prompt || !textModel) {
      await ctx.reply("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ /menu");
      return;
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    const loadingMsg = await ctx.reply("‚è≥ –†–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç...");

    try {
      const result = await textGenerationService.generateText(prompt, {
        model: textModel,
        temperature: 0.7,
        max_tokens: 1000
      });

      if (result.success && result.text) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await ctx.api.editMessageText(
          ctx.chat?.id!,
          loadingMsg.message_id,
          `üìù **–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:**\n\n${result.text}\n\n` +
          `üîß *–ú–æ–¥–µ–ª—å: ${textModel}*\n` +
          `üìä *–¢–æ–∫–µ–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: ${result.usage?.total_tokens || 'N/A'}*`,
          { parse_mode: 'Markdown' }
        );

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —Å–µ—Å—Å–∏–∏
        session.tempData!.generatedText = result.text;

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        await showTextActions(ctx);

      } else {
        await ctx.api.editMessageText(
          ctx.chat?.id!,
          loadingMsg.message_id,
          `‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ${result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`
        );
      }

    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞:", error);
      await ctx.api.editMessageText(
        ctx.chat?.id!,
        loadingMsg.message_id,
        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞"
      );
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
  bot.command('new_text', async (ctx) => {
    ctx.session.state = 'waiting_text_prompt';
    ctx.session.textModel = ctx.session.textModel || TextModel.GPT35;
    
    await ctx.reply(
      `üß† –ú–æ–¥–µ–ª—å: ${ctx.session.textModel}\n\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:`
    );
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –Ω–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  bot.command('new_image', async (ctx) => {
    ctx.session.state = 'waiting_image_prompt';
    ctx.session.imageModel = ctx.session.imageModel || ImageModel.GPT;
    
    await ctx.reply(
      `üé® –ú–æ–¥–µ–ª—å: ${ctx.session.imageModel}\n\n–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏:`
    );
  });
}