import { Bot } from 'grammy';
import { MyContext } from '../types/session.js';
import FileImageService from '../service/fileImageService.js';
import ImageDeliveryService from '../service/imageDeliveryService.js';
import ImageGenerationService from '../service/imageGenerationService.js';
import { logger } from '../utils/logger.js';

export function setupMessageHandlers(bot: Bot<MyContext>,
    imageDeliveryService: ImageDeliveryService,
    imageGenerationService: ImageGenerationService) {

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π)
    bot.on('message:text', async (ctx) => {
        const prompt = ctx.message.text;
        const STATE_TIMEOUT = 10 * 60 * 1000; // 10 –º–∏–Ω—É—Ç

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ —Å–µ—Å—Å–∏–∏ –∏ –Ω–µ —É—Å—Ç–∞—Ä–µ–ª–æ –ª–∏ –æ–Ω–æ
        if (ctx.session.state && ctx.session.timestamp && prompt) {
            const now = Date.now();
            const stateAge = now - ctx.session.timestamp;

            if (stateAge > STATE_TIMEOUT) {
                await ctx.reply("‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ /menu");
                // –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
                ctx.session = {};
                return;
            }

            try {
                const currentState = ctx.session.state;
                const model = ctx.session.model;
                const action = ctx.session.action;
                const saveToServer = ctx.session.saveToServer;

                // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
                ctx.session = {};

                if (currentState === 'waiting_prompt' && model && action) {
                    await handleImageGeneration(ctx, prompt, model, action, saveToServer);
                } else if (currentState === 'generate_to_strapi') {
                    await handleStrapiGeneration(ctx, prompt);
                }

            } catch (error) {
                console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–º–ø—Ç–∞:", error);
                await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞");
                ctx.session = {};
            }
        } else {
            // –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            logger.info("text", ctx);
        }
    });

    // –í—ã–Ω–æ—Å–∏–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã
    async function handleImageGeneration(ctx: any, prompt: string, model: 'gpt' | 'dalle', action: string, saveToServer: boolean = true) {
        await ctx.reply(`üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É –º–æ–¥–µ–ª—å—é ${model}...`);

        const result = await imageGenerationService.generateImage(model, prompt);

        if (!result.success || !result.image) {
            await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É");
            return;
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if (saveToServer) {
            const saved = FileImageService.saveImage(result.image);
            if (saved) {
                await ctx.reply("üíæ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä");
            }
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
        const sent = await imageDeliveryService.sendToTelegram(
            ctx,
            result.image,
            `üé® ${model.toUpperCase()}: "${prompt}"\nüìÅ ${result.image.filename}`
        );

        if (!sent) {
            await ctx.reply("‚ö†Ô∏è –ö–∞—Ä—Ç–∏–Ω–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å");
        }

        // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Strapi
        if (action === 'generate_and_upload') {
            await ctx.reply("üîÑ –û—Ç–ø—Ä–∞–≤–ª—è—é –≤ Strapi...");
            const strapiResult = await imageDeliveryService.sendToStrapi(result.image);

            if (strapiResult) {
                await ctx.reply("‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ Strapi!");
            } else {
                await ctx.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤ Strapi");
            }
        }

        await ctx.reply("‚úÖ –ì–æ—Ç–æ–≤–æ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –Ω–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π");
    }

    async function handleStrapiGeneration(ctx: any, prompt: string) {
        // –°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        await ctx.reply(`üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É –∏ –∑–∞–≥—Ä—É–∂–∞—é –≤ Strapi...`);

        const result = await imageGenerationService.generateImage('dalle', prompt);

        if (!result.success || !result.image) {
            await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É");
            return;
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        FileImageService.saveImage(result.image);

        const deliveryResult = await imageDeliveryService.sendToBoth(ctx, result.image);

        if (deliveryResult.strapiSuccess) {
            await ctx.reply("‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ Strapi!");
        } else {
            await ctx.reply("‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å Strapi");
        }
    }
}

