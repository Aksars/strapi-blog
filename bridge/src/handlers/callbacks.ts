import { Bot } from 'grammy';
import { MyContext } from '../types/session.js';
import {
  madnessMenu,
  showMainMenu,
  switchMainMenu,
  showStrapiMenu,
  showTextModelMenu,
  showImageModelMenu
} from '../keyboards/index.js';
import FileImageService from '../service/fileImageService.js';
import ImageDeliveryService from '../service/imageDeliveryService.js';
import { ImageGenerationService } from '../service/imageGenerationService.js';
import StrapiService from '../service/strapiService.js';
import { ImageModel, TextModel } from '../types/models.js';
import { TextGenerationService } from '../service/textGenerationService.js';
import { logger } from '../utils/logger.js';
export function setupCallbackHandlers(
  bot: Bot<MyContext>,
  imageDeliveryService: ImageDeliveryService,
  imageGenerationService: ImageGenerationService,
  textGenerationService: TextGenerationService,
  strapiService: StrapiService
) {

  function handleCallback(action: string, handler: (ctx: MyContext) => Promise<void>, bot: Bot<MyContext>) {
    bot.callbackQuery(action, async (ctx) => {
      try {
        await ctx.answerCallbackQuery();
        ctx.session.timestamp = Date.now(); // –æ–±—â–∞—è –ª–æ–≥–∏–∫–∞
        await handler(ctx);
      } catch (error) {
        logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${action}, ${error}`)
        await ctx.answerCallbackQuery(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${action} –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞`);
      }
    });
  }


  // –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
  handleCallback("menu", async (ctx) => switchMainMenu(ctx), bot);

  // –í—ã–±–æ—Ä —Ç–∏–ø–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
  handleCallback("generate_text", async (ctx) => {
    ctx.session.generationType = 'text';
    await showTextModelMenu(ctx);
  }, bot);

  handleCallback("random_image", async (ctx) => {
    const img = await FileImageService.getRandomImage();
    if (img) await imageDeliveryService.sendToTelegram(ctx, img);
    else await ctx.reply("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∏ –æ–¥–Ω—É –∫–∞—Ä—Ç–∏–Ω–∫—É(( üöß");
    showMainMenu(ctx)
  }, bot);

  handleCallback("generate_image", async (ctx) => {
    ctx.session.generationType = 'image';
    await showImageModelMenu(ctx);
  }, bot);

  handleCallback("get_existing", async (ctx) => {
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤
    await ctx.reply("üìÇ –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ");
    await switchMainMenu(ctx);
  }, bot);

  // –í—ã–±–æ—Ä –º–æ–¥–µ–ª–µ–π –¥–ª—è —Ç–µ–∫—Å—Ç–∞
  handleCallback("text_model_gpt35", async (ctx) => {
    ctx.session.textModel = TextModel.GPT35;
    ctx.session.state = 'waiting_text_prompt';
    await ctx.editMessageText("üß† –í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: GPT-3.5 Turbo\n\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:");
  }, bot);

  handleCallback("text_model_gpt4", async (ctx) => {
    ctx.session.textModel = TextModel.GPT4;
    ctx.session.state = 'waiting_text_prompt';
    await ctx.editMessageText("üöÄ –í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: GPT-4\n\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:");
  }, bot);

  handleCallback("text_model_gpt4turbo", async (ctx) => {
    ctx.session.textModel = TextModel.GPT4Turbo;
    ctx.session.state = 'waiting_text_prompt';
    await ctx.editMessageText("‚ö° –í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: GPT-4 Turbo\n\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:");
  }, bot);

  // –í—ã–±–æ—Ä –º–æ–¥–µ–ª–µ–π –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  handleCallback("image_model_gpt", async (ctx) => {
    ctx.session.imageModel = ImageModel.GPT;
    ctx.session.state = 'waiting_image_prompt';
    await ctx.editMessageText("üé® –í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: GPT Image\n\n–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏:");
  }, bot);

  handleCallback("image_model_dalle", async (ctx) => {
    ctx.session.imageModel = ImageModel.DALLE;
    ctx.session.state = 'waiting_image_prompt';
    await ctx.editMessageText("üñºÔ∏è –í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: DALL-E\n\n–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏:");
  }, bot);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  handleCallback("save_yes", async (ctx) => {
    ctx.session.saveToServer = true;
    await handlePostImageMenus(ctx);
  }, bot);

  handleCallback("save_no", async (ctx) => {
    ctx.session.saveToServer = false;
    await handlePostImageMenus(ctx);
  }, bot);

  handleCallback("strapi_yes", async (ctx) => {
    ctx.session.sendToStrapi = true;
    await finalizeImageFlow(ctx, strapiService);
  }, bot);

  handleCallback("strapi_no", async (ctx) => {
    ctx.session.sendToStrapi = false;
    await finalizeImageFlow(ctx, strapiService);
  }, bot);
  
  handleCallback("madnessMenu", async (ctx) => {  
    ctx.session.state = 'waiting_temperature_prompt';
    madnessMenu(ctx)
  }, bot);

 

  // // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
  // handleCallback("regenerate_text", async (ctx) => {
  //   const prompt = ctx.session.tempData?.prompt;
  //   if (prompt && ctx.session.textModel) {
  //     await generateText(ctx, textGenerationService, prompt, ctx.session.textModel);
  //   } else {
  //     await ctx.editMessageText("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏");
  //     await switchMainMenu(ctx);
  //   }
  // }, bot);

  handleCallback("new_text", async (ctx) => {
    ctx.session.state = 'waiting_text_prompt';
    await ctx.editMessageText("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:");
  }, bot);

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
  async function handlePostImageMenus(ctx: MyContext) {
    await showStrapiMenu(ctx);
  }

  async function finalizeImageFlow(ctx: MyContext, strapiService: StrapiService) {
    const img = ctx.session.tempData?.image;
    const prompt = ctx.session.tempData?.prompt || '';

    if (!img) {
      await ctx.editMessageText("‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
      return;
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    if (ctx.session.saveToServer) {
      try {
        await FileImageService.saveImage(img);
        await ctx.reply("üíæ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä");
      } catch (err) {
        console.error(err);
        await ctx.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä");
      }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Strapi
    if (ctx.session.sendToStrapi) {
      try {
        await strapiService.uploadImage(img.buffer, img.filename, prompt);
        await ctx.reply("üöÄ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ Strapi!");
      } catch (err) {
        console.error(err);
        await ctx.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤ Strapi");
      }
    }

    // –°–±—Ä–æ—Å —Å–µ—Å—Å–∏–∏
    ctx.session.state = undefined;
    ctx.session.tempData = {};

    await ctx.editMessageText("üéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –Ω–æ–≤–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è");
    await switchMainMenu(ctx);
  }




  // async function handleTextGeneration(
  //   ctx: MyContext,
  //   textService: TextGenerationService,
  //   prompt: string,
  //   model: TextModel
  // ) {
  //   try {
  //     // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
  //     const loadingMsg = await ctx.reply("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç...");

  //     // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞
  //     const result = await textService.generateText(prompt, {
  //       model: model,
  //       temperature: 0.7
  //     });

  //     if (result.success && result.text) {
  //       // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–µ—Å—Å–∏–∏
  //       ctx.session.tempData = {
  //         prompt,
  //         generatedText: result.text
  //       };

  //       // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  //       await ctx.api.editMessageText(
  //         ctx.chat?.id!,
  //         loadingMsg.message_id,
  //         `üìù **–†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:**\n\n${result.text}\n\n` +
  //         `üîß *–ú–æ–¥–µ–ª—å: ${model}*\n` +
  //         `üìä *–¢–æ–∫–µ–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: ${result.usage?.total_tokens || 'N/A'}*`
  //       );

  //       // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è
  //       await ctx.reply(
  //         "–ß—Ç–æ –¥–∞–ª—å—à–µ?\n\n" +
  //         "‚Ä¢ /regenerate - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ\n" +
  //         "‚Ä¢ /new_text - –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å\n" +
  //         "‚Ä¢ /menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
  //         { parse_mode: 'Markdown' }
  //       );

  //     } else {
  //       await ctx.editMessageText(`‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ${result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
  //       await switchMainMenu(ctx);
  //     }

  //   } catch (error) {
  //     console.error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞:", error);
  //     await ctx.editMessageText("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞");
  //     await switchMainMenu(ctx);
  //   }
  // }
}