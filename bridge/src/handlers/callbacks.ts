import { Bot } from 'grammy';
import { MyContext } from '../types/session.js';
import { showAIMenu, switchMainMenu, showSaveMenu } from '../keyboards/index.js';
import FileImageService from '../service/fileImageService.js';
import ImageDeliveryService from '../service/imageDeliveryService.js';
import { logger } from '../utils/logger.js';
import ImageGenerationService from '../service/imageGenerationService.js';

export function setupCallbackHandlers(bot: Bot<MyContext>, imageDeliveryService: ImageDeliveryService, imageGenerationService:ImageGenerationService) {
    
    handleCallback("whereGetResultMenu", async (ctx) => {
        await showAIMenu(ctx)
    }, bot);

    handleCallback("menu", async (ctx) => {
        await switchMainMenu(ctx)
    }, bot);

    handleCallback("generate_gpt", async (ctx) => {
        ctx.session.state = 'choosing_action';
        ctx.session.model = 'gpt';
        await showAIMenu(ctx);
    }, bot);

    handleCallback("generate_dalle", async (ctx) => {
        ctx.session.state = 'choosing_action';
        ctx.session.model = 'dalle';
        await showAIMenu(ctx);
    }, bot);

    handleCallback("action_just_generate", async (ctx) => {
        ctx.session.action = 'generate';
        ctx.session.state = 'choosing_save_option';
        await showSaveMenu(ctx);
    }, bot);

    handleCallback("action_generate_and_upload", async (ctx) => {
        ctx.session.action = 'generate_and_upload';
        ctx.session.state = 'choosing_save_option';
        await showSaveMenu(ctx);
    }, bot);

    handleCallback("save_yes", async (ctx) => {
        ctx.session.saveToServer = true;
        ctx.session.state = 'waiting_prompt';
        await ctx.editMessageText("üíæ –ë—É–¥—É —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏:");
    }, bot);

    handleCallback("save_no", async (ctx) => {
        ctx.session.saveToServer = false;
        ctx.session.state = 'waiting_prompt';
        await ctx.editMessageText("üö´ –ù–µ –±—É–¥—É —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏:");
    }, bot);

    handleCallback("random_image", async (ctx) => {
        const img = await FileImageService.getRandomImage();
        if (img) await imageDeliveryService.sendToTelegram(ctx, img);
        else await ctx.reply("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∏ –æ–¥–Ω—É –∫–∞—Ä—Ç–∏–Ω–∫—É(( üöß");
    }, bot);

    handleCallback("generate_text", async (ctx) => {
        await ctx.reply("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞! üöß");
    }, bot);
}

function handleCallback(action: string, handler: (ctx: MyContext) => Promise<void>, bot: Bot<MyContext>) {
    bot.callbackQuery(action, async (ctx) => {
        try {
            await ctx.answerCallbackQuery();
            ctx.session.timestamp = Date.now(); // –æ–±—â–∞—è –ª–æ–≥–∏–∫–∞
            await handler(ctx);
        } catch (error) {
            logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${action}, ${error}`)
            await ctx.answerCallbackQuery(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${action} –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞`);
        }
    });
}



