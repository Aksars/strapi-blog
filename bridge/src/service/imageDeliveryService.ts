import { InputFile } from 'grammy';
import type { Context } from 'grammy';
import type { Image } from './imageGenerationService.js';
import StrapiService from './strapiService.js';

export default class ImageDeliveryService {
  private readonly strapiService: StrapiService;

  constructor(strapiService: StrapiService) {
    this.strapiService = strapiService;
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Telegram
  async sendToTelegram(ctx: Context, image: Image, caption: string = ''): Promise<boolean> {
    try {
      if (!image || !image.buffer) {
        console.error("Invalid image provided");
        return false;
      }

      await ctx.replyWithPhoto(
        new InputFile(image.buffer, image.filename),
        { caption }
      );
      return true;
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:", error);
      return false;
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Strapi
  async sendToStrapi(image: Image): Promise<any> {
    try {
      if (!image || !image.buffer) {
        console.error("Invalid image provided");
        return null;
      }

      const description = image.prompt 
        ? `–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –±–æ—Ç–æ–º: ${image.prompt}`
        : '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –±–æ—Ç–æ–º';

      return await this.strapiService.uploadImage(
        image.buffer,
        image.filename,
        description
      );
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Strapi:", error);
      return null;
    }
  }

  // –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞: –≤ Telegram –∏ Strapi
  async sendToBoth(ctx: Context, image: Image): Promise<{
    telegramSuccess: boolean;
    strapiSuccess: boolean;
    strapiResult?: any;
  }> {
    try {
      if (!image || !image.buffer) {
        console.error("Invalid image provided");
        return { telegramSuccess: false, strapiSuccess: false };
      }

      // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram –∏ Strapi
      const [telegramResult, strapiResult] = await Promise.allSettled([
        this.sendToTelegram(ctx, image, `üîÑ –ó–∞–≥—Ä—É–∂–∞—é –≤ Strapi...`),
        this.sendToStrapi(image)
      ]);

      const telegramSuccess = telegramResult.status === 'fulfilled' && telegramResult.value;
      const strapiSuccess = strapiResult.status === 'fulfilled' && strapiResult.value !== null;

      // –û–±–Ω–æ–≤–ª—è–µ–º caption –≤ Telegram –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
      let finalCaption = `üé® "${image.prompt}"\nüìÅ ${image.filename}`;
      
      if (strapiSuccess) {
        finalCaption = `‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –≤ Strapi!\nüé® "${image.prompt}"\nüìÅ ${image.filename}\nüîó ID: ${strapiResult.value.id}`;
      } else {
        finalCaption += `\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤ Strapi`;
      }

      // –ï—Å–ª–∏ Telegram –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º caption
      if (!telegramSuccess) {
        await this.sendToTelegram(ctx, image, finalCaption);
      }

      return {
        telegramSuccess: telegramSuccess || true,
        strapiSuccess,
        strapiResult: strapiSuccess ? strapiResult.value : undefined
      };

    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏:", error);
      
      // –§–æ–ª–±—ç–∫: –ø—ã—Ç–∞–µ–º—Å—è —Ö–æ—Ç—è –±—ã –≤ Telegram –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
      const telegramSuccess = await this.sendToTelegram(
        ctx, 
        image, 
        `üé® "${image.prompt}"\nüìÅ ${image.filename}\n‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤ Strapi`
      );

      return {
        telegramSuccess,
        strapiSuccess: false
      };
    }
  }
}
